// -----------------------------------------------------
// Utilities
// -----------------------------------------------------

html5-inputs = unquote("input[type='email'], input[type='number'], input[type='password'], input[type='search'], input[type='tel'], input[type='text'], input[type='url'], input[type='color'], input[type='date'], input[type='datetime'], input[type='datetime-local'], input[type='month'], input[type='time'], input[type='week']")

// Mixin: Pie
// When turned on, enables css3 pie (http://css3pie.com/) for all
// elements that can use it. Which makes IE look a lot nicer.

pie()
  behavior: url(/vendor/pie.htc) if pie-enabled

// Helper: Literal Join
// Ported from visionmedia/nib

literal-join(string, literals)
  result = unquote('')
  first = true
  for args in literals
    subresult = unquote('')
    for arg in args
      subresult = subresult arg
    if first
      result = subresult
      first = false
    else
      result = s('%s%s%s', result, unquote(string), subresult)
  return result

// Mixin: Prefix
// Pass this a key and a value and it will put all the browser prefixes on it.
// ex. +prefix(box-shadow, 0 0 3px #000)
// ex. +prefix(transition, all .3s ease)

prefix(prop, val)
  
  val = literal-join(',', val) if length(val) > 1

  for prefix in vendors
    if prefix == official
      {prop}: val
    else
      -{prefix}-{prop}: val

// Mixin: Transition
// A shortcut for prefixed transitions with an intelligent default. If you want to pass it multiple
// comma-separated transitions you must put your parameters in quotes (or the commas get confused)
// ex. +transition
// ex. +transition(color 1s ease)
// ex. +transition("color, background 1s ease")
  
transition(params...)
  params = unquote('all .3s ease') unless params
  prefix(transition, params)

// Mixin: Box Shadow
// A shortcut for prefixed box-shadows with an intelligent default. If you want to pass it multiple
// comma-separated shadows you must put your parameters in quotes (or the commas get confused)
// ex. +box-shadow
// ex. +box-shadow(1px 1px 3px blue)
// ex. +box-shadow("1px 1px 3px blue, inset 2px 0 5px rgba(0,0,0,.5)")

box-shadow(params...)
  prefix(box-shadow, params)
  pie()

// Mixin: Opacity
// I know, it seems silly. But every time you go to IE testing you will be thanking yourself for
// using this instead of the normal opacity declaration. Takes the same params as opacity would normally
// ex. +opacity(.6)

opacity(opacity)
  filter: s("progid:DXImageTransform.Microsoft.Alpha(Opacity=%s)", opacity * 100)
  opacity: opacity

// Mixin: Rotate
// Prefixed rotation with IE compatibility. Takes a degree value followed by "deg"
// ex. +rotate(45deg)

rotate(params)
  prefix(transform, s("rotate(%s)", params))
  pie()

// Mixin: Rounded
// Unless you are working with a ridiculously large element, this will round the corners
// as much as css will allow. Even in IE.
// ex. +rounded

rounded()
  border-radius: 999px
  pie()

// Mixin: Round Corners
// Take a guess what this does. Aliases border-radius, works in IE.
// ex. +round-corners(5px)

round-corners(px)
  prefix(border-radius, px)
  pie()

// Mixin: Round
// Take a guess what this does. Aliases border-radius, works in IE.
// ex. +round(5px)

round(px)
  round-corners(px)

// Mixin: Border
// Alias of border, but with an intelligent default

border(params...)
  params = unquote('1px solid') unless params
  border: params

// Mixin: B
// Alias of border, but with an intelligent default. Intended for quick debugging use.
// I used to spend a lot of time typing "border: 1px solid", but no more!
// ex. +b

b()
  border()

// Mixin: Bg
// Alias for background (with images), makes it a little quicker. Takes three arguments, the first is
// the image path, second is background-position if you want, third is background repeat.
// ex. +bg(../img/test.png)
// ex. +bg(../img/other.jpg, center center, repeat)

bg(path, position = unquote(""), repeat = no-repeat)
  background: url(unquote(path)) position repeat

// Mixin: Bold
// It's just faster to type +bold than font-weight: bold
// ex. +bold

bold()
  font-weight: bold

// Mixin: Italic
// It's just faster to type +italic than font-style: italic
// ex. +bold

italic()
  font-style: italic

// Mixin: Columns
// For css3 columns. Takes column count (int), column gap (px, em), column width (px, em), and
// a border-like declaration if you want a column rule. This follows exactly with the css3 spec,
// it's just quicker, prefixed, and shortened.
// ex. +columns
// ex. +columns(5)
// ex. +columns(8, 15px, 200px, 1px solid red)

columns(count = 3, gap = 30px, width = null, rule = null)
  prefix(column-count, count)
  prefix(column-gap, gap)
  prefix(column-width, width) if width
  prefix(column-rule, rule) if rule

// Mixin: Avoid Column Break
// If you have a list that is broken into columns, this will make sure that the list item
// is not split across columns awkwardly. Works only in webkit at the moment.

avoid-column-break()
  prefix(column-break-inside, avoid)

// Mixin: Triangle
// One of my favorites. Makes a little css triangle for you. Pass it a direction (up, down, left, right),
// size (in pixels), and a color.
// ex. +triangle
// ex. +triangle(down, 15px, blue)

triangle(direction = up, size = 10px, color = #000)
  width: 0
  height: 0
  if direction == up
    border-left: size solid transparent
    border-right: size solid transparent
    border-bottom: size solid color
  else if direction == down
    border-left: size solid transparent
    border-right: size solid transparent
    border-top: size solid color
  else if direction == left
    border-top: size solid transparent
    border-bottom: size solid transparent
    border-right: size solid color
  else if direction == right
    border-top: size solid transparent
    border-bottom: size solid transparent
    border-left: size solid color

// Mixin: Ir
// Image replacement. Pass it an image path and the image's dimensions and any text will be hidden
// in the div and it will show an image instead. Uses the fanciest new method, props to Paul Irish
// Avoid any possibility of an error by quoting the image path. Also looks cleaner.
// ex. +ir("../img/test.jpg", 200px 400px)

ir(path = null, dimensions = null)
  font: 0/0 a
  text-shadow: none
  color: transparent
  bg(path) if path
  if length(dimensions) > 1
    width: dimensions[0]
    height: dimensions[1]
  else
    warn("Dimenions takes a space-separated list of values - order: width, height. Ex: +ir('img.jpg', 100px 150px)")


// Mixin: Group
// This is the clearfix with a better name. I use this mixin like there's no tomorrow. It's like using
// overflow: hidden, except it doesn't hide the overflow. Awesome for wrangling floats, and really quick now.
// ex. +group

group()
  zoom: 1
  &:before
  &:after
    content: ""
    display: table
  &:after
    clear: both

// Mixin: Clearfix
// In case you can't leave this crazy word in the past. This is an alias for group.
// ex. +clearfix

clearfix()
  group()

// Mixin: Inline Block
// Cross browser inline block display. Saves many IE headaches.
// ex. +inline-block

inline-block()
  display: -moz-inline-stack
  display: inline-block
  vertical-align: baseline
  zoom: 1
  *display: inline
  *vertical-align: auto;

// Mixin: Media
// Based on Nicole Sullivan's media class, made famous by Facebook
// http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/

// Put this on a parent and it will split the first two children left and right, like you would with perhaps
// a comment with an avatar to the left. Pass it a margin between the two.
// Explained fully here: http://carrotblog.com/css-patterns-evolved/

// This mixin works right when the element you apply it to has two or three direct children
// The first one will float to the left, the second one will be to the right of the first, and third will go farthest right
// ex. +split
// ex. +split(15px)
// ex. +split(15px 10px)

media(margin = 10px)
  
  left: margin
  right: margin

  if length(margin) > 1
    left:  margin[0]
    right: margin[1]

  overflow: hidden
  zoom: 1

  & > *
    overflow: hidden
    zoom: 1
  & > *:first-child
    float: left
    margin-right: right
  & > *:nth-child(3)
    float: right
    margin-left: left

// Mixin: Raquo
// Because technically raquo is not semantic, it's easier to add it like this.
// ex. +raquo

raquo()
  &:after
    content: " \00BB"

// Mixin: D
// I find myself writing "width: blah blah px, height: blah px" all the time. This makes it so so
// much faster. The arguments it accepts are very flexible. You can pass it one number and it will set that
// to the width and height. You can give it units, and if you don't it will assume pixels. You can pass
// it two numbers and it will set the first to width and the second to height. It's very convenient.
// ex. +d(50) => width: 50px; height: 50px;
// ex. +d(1.5em 2em) => width: 1.5em; height: 2em

dimensions(numbers)
  if length(numbers) > 1
    width: unit(numbers[0], px)
    height: unit(numbers[1], px)
  else
    width: unit(numbers, px)
    height: unit(numbers, px)

// Mixin: Size
// A shorter alias for dimensions, because I use it so so often. Also is called like a 
// regular css property, to make life a bit easier

size(numbers...)
  if length(numbers) > 1
    width: unit(numbers[0], px)
    height: unit(numbers[1], px)
  else
    width: unit(numbers, px)
    height: unit(numbers, px)

border-box()
  prefix(box-sizing, border-box)

// Mixin: Debug
// Debugging tool - drop this at root level in your css and it will put borders on every element so
// you can see what's up. It will also flag them if you made mistakes like put in inline styles, forgot
// an alt on an image, left the alt blank, etc. For god's sake don't use this in production.

// all credit for this goes to intuit.css, from which I adapted it (and improved it a bit)
// https://github.com/csswizardry/inuit.css

debug()
  html
    
    div
      border: 1px solid green

    [style], style
      border: 5px solid yellow

    style
      border: block

    img
      border: 5px solid red

    img[alt]
      border-color: green

    img[alt=""]
      border-color: yellow

    a
      border: 5px solid yellow

    a[title]
      border-color: green

    a[href="#"]
      outline-color: yellow

    a[target]
      border-color: red

    [class=""], [id=""]
      border: 5px solid yellow

// Mixin: Animation
// How you actually implement the animation. Takes animation name, duration, and how to handle
// looping. works the same way as the official, just prefixes it.
// ex. +animation(fade-out, 5s, infinite)

animation(params)
  prefix(animation, params)

// Custom animation timing functions, ported from bourbon
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_timing-functions.scss

// ease-in
ease-in-quad =      cubic-bezier(0.550,  0.085, 0.680, 0.530)
ease-in-cubic =     cubic-bezier(0.550,  0.055, 0.675, 0.190)
ease-in-quart =     cubic-bezier(0.895,  0.030, 0.685, 0.220)
ease-in-quint =     cubic-bezier(0.755,  0.050, 0.855, 0.060)
ease-in-sine =      cubic-bezier(0.470,  0.000, 0.745, 0.715)
ease-in-expo =      cubic-bezier(0.950,  0.050, 0.795, 0.035)
ease-in-circ =      cubic-bezier(0.600,  0.040, 0.980, 0.335)
ease-in-back =      cubic-bezier(0.600, -0.280, 0.735, 0.045)

// ease-out
ease-out-quad =     cubic-bezier(0.250,  0.460, 0.450, 0.940)
ease-out-cubic =    cubic-bezier(0.215,  0.610, 0.355, 1.000)
ease-out-quart =    cubic-bezier(0.165,  0.840, 0.440, 1.000)
ease-out-quint =    cubic-bezier(0.230,  1.000, 0.320, 1.000)
ease-out-sine =     cubic-bezier(0.390,  0.575, 0.565, 1.000)
ease-out-expo =     cubic-bezier(0.190,  1.000, 0.220, 1.000)
ease-out-circ =     cubic-bezier(0.075,  0.820, 0.165, 1.000)
ease-out-back =     cubic-bezier(0.175,  0.885, 0.320, 1.275)

// ease-in-out
ease-in-out-quad =  cubic-bezier(0.455,  0.030, 0.515, 0.955)
ease-in-out-cubic = cubic-bezier(0.645,  0.045, 0.355, 1.000)
ease-in-out-quart = cubic-bezier(0.770,  0.000, 0.175, 1.000)
ease-in-out-quint = cubic-bezier(0.860,  0.000, 0.070, 1.000)
ease-in-out-sine =  cubic-bezier(0.445,  0.050, 0.550, 0.950)
ease-in-out-expo =  cubic-bezier(1.000,  0.000, 0.000, 1.000)
ease-in-out-circ =  cubic-bezier(0.785,  0.135, 0.150, 0.860)
ease-in-out-back =  cubic-bezier(0.680, -0.550, 0.265, 1.550)

// Definitely considering bringing in the position utilities here:
// https://github.com/visionmedia/nib/blob/master/lib/nib/positions.styl